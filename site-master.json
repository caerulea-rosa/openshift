{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {

    },
    "variables": {
        "PublicIP-name": "siteapipublicip",
        "loadbalancer-name": "[concat('siteapiPool','loadbalancername')]",
        "loadbalancer-name2": "[concat('siteapiPool','loadbalancername2')]",
        "backend-address-pool-name": "[concat('siteapiPool','backendpool')]",
        "apiVersion": "2015-06-15",
        "storageName": "[concat(uniqueString(resourceGroup().id), 'sitemaster1')]",
        "location": "[resourceGroup().location]",
        "sa": "[variables('storageName')]",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', 'siteOpenshiftVnet')]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', 'siteSubnet')]",
        "vmName": "sitemaster1",
        "vmSize": "Standard_DS11_v2",
        "adminUsername": "outotecpoc",
        "internalLoadbalancerip": "10.0.4.11",
        "imageReference": {
            "publisher": "RedHat",
            "offer": "RHEL",
            "sku": "7.3",
            "version": "latest"
        },
        "vhdStorageType": "Standard_LRS"
    },
    "resources": [{
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageName')]",
            "apiVersion": "[variables('apiVersion')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('vhdStorageType')]"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('loadbalancer-name')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Load Balancer API"
            },
            "properties": {
                "frontendIPConfigurations": [{
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('PublicIP-name'))]"
                            }

                        }
                    }

                ],
                "backendAddressPools": [{
                    "name": "[variables('backend-address-pool-name')]"
                }],
                "loadBalancingRules": [{
                    "name": "Http",
                    "properties": {
                        "frontendIPConfiguration": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer-name')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
                        },
                        "frontendPort": 443,
                        "backendPort": 443,
                        "enableFloatingIP": false,
                        "idleTimeoutInMinutes": 4,
                        "protocol": "Tcp",
                        "loadDistribution": "Default",
                        "backendAddressPool": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer-name')), '/backendAddressPools/', variables('backend-address-pool-name'))]"
                        },
                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer-name')), '/probes/TCP-ProbeHTTP')]"

                        }
                    }
                }],
                "probes": [{
                    "name": "TCP-ProbeHTTP",
                    "properties": {
                        "protocol": "Tcp",
                        "port": 443,
                        "intervalInSeconds": 5,
                        "numberOfProbes": 2
                    }
                }],
                "inboundNatRules": [],
                "outboundNatRules": [],
                "inboundNatPools": []
            }

        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('loadbalancer-name2')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Load Balancer API"
            },
            "properties": {
                "frontendIPConfigurations": [

                    {
                        "name": "LoadBalancerFrontback",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('internalLoadbalancerip')]",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }

                ],
                "backendAddressPools": [{
                    "name": "[variables('backend-address-pool-name')]"
                }],
                "loadBalancingRules": [{
                    "name": "Http",
                    "properties": {
                        "frontendIPConfiguration": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer-name2')), '/frontendIPConfigurations/LoadBalancerFrontback')]"
                        },
                        "frontendPort": 443,
                        "backendPort": 443,
                        "enableFloatingIP": false,
                        "idleTimeoutInMinutes": 4,
                        "protocol": "Tcp",
                        "loadDistribution": "Default",
                        "backendAddressPool": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer-name2')), '/backendAddressPools/', variables('backend-address-pool-name'))]"
                        },
                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer-name2')), '/probes/TCP-ProbeHTTP')]"

                        }
                    }
                }],
                "probes": [{
                    "name": "TCP-ProbeHTTP",
                    "properties": {
                        "protocol": "Tcp",
                        "port": 443,
                        "intervalInSeconds": 5,
                        "numberOfProbes": 2
                    }
                }],
                "inboundNatRules": [],
                "outboundNatRules": [],
                "inboundNatPools": []
            }

        },
        {
            "apiVersion": "[variables('apiVersion')]",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('vmName'), 'nic')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NetworkInterface"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/loadBalancers/', variables('loadbalancer-name'))]"
            ],
            "properties": {
                "ipConfigurations": [{
                    "name": "ipconfig1",
                    "properties": {
                        "privateIPAllocationMethod": "Dynamic",
                        "subnet": {
                            "id": "[variables('subnetRef')]"
                        },
                        "loadBalancerBackendAddressPools": [{
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadbalancer-name')), '/backendAddressPools/', variables('backend-address-pool-name'))]"
                        }]
                    }
                }]
            }
        },
        {
            "apiVersion": "[variables('apiVersion')]",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "location": "[resourceGroup().location]",

            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', concat(variables('vmName'), 'nic'))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "5t7!!dr5hgd$",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "false"
                    }
                },
                "storageProfile": {
                    "imageReference": "[variables('imageReference')]",
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('sa')), variables('apiVersion')).primaryEndpoints.blob, 'openshiftvmachines/', variables('vmName'), 'osdisk.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    },
                    "dataDisks": [{
                        "caching": "None",
                        "createOption": "Empty",
                        "diskSizeGB": "40",
                        "lun": 0,
                        "name": "[variables('vmName')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('sa')), variables('apiVersion')).primaryEndpoints.blob, 'openshiftvmachines/', variables('vmName'), '_datadisk1.vhd')]"

                        }
                    }]
                },
                "networkProfile": {
                    "networkInterfaces": [{
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmName'), 'nic'))]"
                    }]
                }
            }
        }
    ],
    "outputs": {}
}

